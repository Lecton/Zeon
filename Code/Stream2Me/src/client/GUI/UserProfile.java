package client.GUI;

import MediaStreaming.Audio.AudioCapture;
import MediaStreaming.Video.ScreenCapture;
import MediaStreaming.Video.StreamVideo;
import Messages.AudioStream;
import Messages.VideoStream;
import client.Colleague;
import client.Connection;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lecton
 */
public class UserProfile extends javax.swing.JPanel {
    GUI userInterface =null;
    
    /**
     * Creates new form UserProfile
     */
    public UserProfile() {
        initComponents();
    }
    
    public UserProfile(GUI userInterface) {
        this.userInterface =userInterface;
        initComponents();
    }
    
    public void setAvatar(BufferedImage newAvatar) {
        ImageIcon resizedAvatar =new ImageIcon(newAvatar.getScaledInstance(133, 133, Image.SCALE_SMOOTH));
        avatar.setIcon(resizedAvatar);
    }
    
    public void setAvatar() throws IOException {
//        File f =searchForDefault();
//        if (f != null) {
//            setAvatar(ImageIO.read(f))
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        avatar = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        something = new javax.swing.JLabel();
        audioBtn = new client.GUI.Buttons.AudioButton();
        videoBtn = new client.GUI.Buttons.VideoButton();
        streamBtn = new client.GUI.Buttons.StreamButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(208, 192));
        setMinimumSize(new java.awt.Dimension(208, 192));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(208, 192));
        setRequestFocusEnabled(false);

        avatar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/default_profile.png"))); // NOI18N
        avatar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                avatarMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                avatarMousePressed(evt);
            }
        });

        name.setText("User");

        something.setText("Something");

        audioBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unclicked-microphone.png"))); // NOI18N
        audioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioBtnActionPerformed(evt);
            }
        });

        videoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unclicked-camera.png"))); // NOI18N
        videoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoBtnActionPerformed(evt);
            }
        });

        streamBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unclicked-stream.png"))); // NOI18N
        streamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(audioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(videoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(streamBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name)
                            .addComponent(something))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(something))
                    .addComponent(avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(videoBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(audioBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(streamBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void audioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioBtnActionPerformed
        Colleague selectedColleague =(Colleague)userInterface.getContactPane().getSelectedValue();
        if (selectedColleague != null) {
            if (!audioBtn.pressed) {
                selectedColleague.startAudioStream();
            } else {
                selectedColleague.stopAudioStream();
            }
        }
    }//GEN-LAST:event_audioBtnActionPerformed

    private void videoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoBtnActionPerformed
        Colleague selectedColleague =(Colleague)userInterface.getContactPane().getSelectedValue();
        if (selectedColleague != null) {
            if (!videoBtn.pressed) {
                selectedColleague.startVideoStream();
            } else {
                selectedColleague.stopVideoStream();
            }
        }
    }//GEN-LAST:event_videoBtnActionPerformed

    private void avatarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_avatarMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_avatarMousePressed

    private void streamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamBtnActionPerformed
        Colleague selectedColleague =(Colleague)userInterface.getContactPane().getSelectedValue();
        if (selectedColleague != null) {
            if (!streamBtn.pressed) {
                selectedColleague.startAudioStream();
                selectedColleague.startVideoStream();
            } else {
                selectedColleague.stopAudioStream();
                selectedColleague.stopVideoStream();
            }
        }
    }//GEN-LAST:event_streamBtnActionPerformed

    private void avatarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_avatarMouseClicked
        if (evt.getButton() == 3) {
            try {
                JFileChooser chooser =new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                FileNameExtensionFilter filter =new FileNameExtensionFilter("images", "jpg","bmp","png");
                chooser.setFileFilter(filter);
                
                if (chooser.showOpenDialog(null) == 0) {
                    deleteFile();
                    
                    File cf =chooser.getSelectedFile();
                    String ext =cf.getName().substring(cf.getName().lastIndexOf(".")+1);
                    File nf =new File(FILE_DIR+NAME+"."+ext);
                    BufferedImage bi =resizeImage(ImageIO.read(cf));
                    ImageIO.write(bi, ext, nf);
                    setAvatar(bi);
                }
            } catch (IOException e) {
                System.err.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_avatarMouseClicked

    public void deleteFile() throws IOException {
        File folder =new File(FILE_DIR);
        File[] files =folder.listFiles();
        if (files != null && files.length > 0) {
            for (File f: files) {
                if (f.isFile() && f.getName().startsWith(NAME)) {
                    if (!f.delete()) {
                        throw new IOException("File could not be deleted");
                    }
                }
            }
        } else {
            System.out.println("There are no files");
        }
    }
    
    public BufferedImage resizeImage(BufferedImage img) {
        BufferedImage newImage =new BufferedImage(SMALL_SIZE, SMALL_SIZE, BufferedImage.TYPE_INT_RGB);
        Graphics g =newImage.getGraphics();
        g.drawImage(img, 0, 0, SMALL_SIZE, SMALL_SIZE, null);
        g.dispose();
        
        return newImage;
    }
    
    private int ID;
    private final String FILE_DIR =".\\assests\\profile\\";
    private final String NAME ="" + ID;
    private final int SMALL_SIZE =133;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private client.GUI.Buttons.AudioButton audioBtn;
    private javax.swing.JLabel avatar;
    private javax.swing.JLabel name;
    private javax.swing.JLabel something;
    private client.GUI.Buttons.StreamButton streamBtn;
    private client.GUI.Buttons.VideoButton videoBtn;
    // End of variables declaration//GEN-END:variables
}
