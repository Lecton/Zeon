/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mvc.view.generalUI.containers;

import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComponent;

/**
 *
 * @author Bernhard
 */
public class HideArrow extends JButton {
    private final static Logger LOGGER = Logger.getLogger(HideArrow.class.getName());
    
    private boolean rightDirection =false;
    private JComponent dependant =null;
//    JPanel parent;
//    Dimension prefSize;
    
    /**
     * Creates new form HideArrow
     */
    public HideArrow() {
        initComponents();
        this.setBackground(Color.WHITE);
    }
    
    public void setPosition(JComponent dependant, boolean Right) {
        this.rightDirection =Right;
        this.dependant =dependant;
    }

    public JComponent getDependant() {
        return dependant;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(23, 32767));
        setMinimumSize(new java.awt.Dimension(23, 90));
        setName(""); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        
        int topY =210;
        int topX =10;
        
        int centreY =250;
        int centreX =3;
        
        int bottomY =290;
        int bottomX =10;
        
        if (dependant != null) {
            if (rightDirection) {
                if (dependant.isVisible()) {
                    topX =3;
                    centreX =10;
                    bottomX =3;
                } else {

                }
            } else {
                if (dependant.isVisible()) {

                } else {
                    topX =3;
                    centreX =10;
                    bottomX =3;
                }
            }
        }
//        int gap =2;
//        int width =13;
        
        
        
//        
//        int leftX =gap*3;
//        int rightX =width-gap;
//        int topY =gap*2+this.getHeight()/2-height;
//        int bottomY =topY+height;
//        int centreY =topY+(bottomY-topY)/2;
//        
//        if (dependant != null) {
//            if (Right) {
//                if (dependant.isVisible()) {
//                    int temp =leftX;
//                    leftX =rightX;
//                    rightX =temp;
//                } else {
//
//                }
//            } else {
//                if (dependant.isVisible()) {
//
//                } else {
//                    int temp =leftX;
//                    leftX =rightX;
//                    rightX =temp;
//                }
//            }
//        }
//        
        int[] xPoints =new int[3];
        xPoints[0] =topX;
        xPoints[1] =centreX;
        xPoints[2] =bottomX;
        
        int[] yPoints =new int[3];
        yPoints[0] =topY;
        yPoints[1] =centreY;
        yPoints[2] =bottomY;
        g.setColor(Color.BLUE);
        g.fillPolygon(xPoints, yPoints, 3);
//        
        g.drawLine(topX, topY, bottomX, bottomY);
        g.drawLine(topX, topY, centreX, centreY);
        g.drawLine(centreX, centreY, bottomX, bottomY);
    }
}