/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mvc.view.generalUI;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author Bernhard
 */
public class NotificationIcon extends javax.swing.JPanel {
    private final static Logger LOGGER = Logger.getLogger(NotificationIcon.class.getName());
    
    public static enum iconType {MESSAGE, VIDEO, AUDIO};
    private double w =200, h =200;
    private static int gap =3;
    private int t =0;
    
    iconType type =iconType.MESSAGE;

    /**
     * Creates new form NotificationIcon
     */
    public NotificationIcon() {
        initComponents();
        type =iconType.MESSAGE;
    }

    public void setType(iconType type) {
        this.type = type;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g) {
        if (getParent() != null) {
            this.setBackground(getParent().getBackground());
        }
        super.paint(g); //To change body of generated methods, choose Tools | Templates.super.paint(g);
        
        w =getSize().width;
        h =getSize().height;
        
               
        try {
//            Image i =
//            Image i =getImage().getScaledInstance(10, 10, Image.SCALE_SMOOTH);
//            BufferedImage bi =new BufferedImage(i.getWidth(this), i.getHeight(this), BufferedImage.TYPE_INT_ARGB);
//            bi.getGraphics().drawImage(i, 0, 0, this);
//            
            BufferedImage bi =getImage();
            if (bi != null) {
                
                bi =scale(bi, getRatio(bi.getWidth(), bi.getHeight(),w-gap,h-gap));
                
                g.drawImage(bi, (int)((w-(double)bi.getWidth())/2.0), (int)((h-(double)bi.getHeight())/2), this);
            }
        } catch (IOException ex) {
//            ex.printStackTrace();
        }
    }
    
    private double getRatio(double w, double h, double targetW, double targetH) {
        double r1 =targetW/w;
        double r2 =targetH/h;
        return (r1 < r2? r1 : r2);
    }
    
    private BufferedImage scale(BufferedImage source,double ratio) {
        int w = (int) (source.getWidth() * ratio);
        int h = (int) (source.getHeight() * ratio);
        BufferedImage bi = getCompatibleImage(w, h);
        Graphics2D g2d = bi.createGraphics();
        double xScale = (double) w / source.getWidth();
        double yScale = (double) h / source.getHeight();
        AffineTransform at = AffineTransform.getScaleInstance(xScale,yScale);
        g2d.drawRenderedImage(source, at);
        g2d.dispose();
        return bi;
    }
    
    private BufferedImage getCompatibleImage(int w, int h) {
        return new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
    }
    
    private BufferedImage getImage() throws IOException {
        switch (type) {
            case MESSAGE:
                return ImageIO.read((getClass().getResource("/notification_Icons/message_icon.png")));
            case VIDEO:
                return ImageIO.read((getClass().getResource("/notification_Icons/video_icon.png")));
            case AUDIO:
                return ImageIO.read((getClass().getResource("/notification_Icons/audio_icon.png")));
            default:
                return null;
        }
    }
}
