/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mvc.view.generalUI;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.util.logging.Logger;
import javax.swing.JComponent;
import mvc.controller.ContactListControl;
import mvc.controller.GUIControl;
import mvc.controller.UserControl;
import mvc.view.generalUI.contacts.ContactList;
import mvc.view.generalUI.message.MessagePanel;

/**
 *
 * @author Bernhard
 */
public class GUI extends javax.swing.JFrame {
    private final static Logger LOGGER = Logger.getLogger(GUI.class.getName());
    

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        
        setupGUI();
        
        settings.setVisible(false);
        logout.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftArrow = new mvc.view.generalUI.containers.HideArrow();
        rightArrow = new mvc.view.generalUI.containers.HideArrow();
        controls = new javax.swing.JPanel();
        streamVideo = new mvc.view.generalUI.containers.Button();
        streamAudio = new mvc.view.generalUI.containers.Button();
        logout = new mvc.view.generalUI.containers.Button();
        settings = new mvc.view.generalUI.containers.Button();
        acceptAudio = new mvc.view.generalUI.containers.Button();
        acceptVideo = new mvc.view.generalUI.containers.Button();
        people = new javax.swing.JPanel();
        user = new mvc.view.generalUI.UserPanel();
        contactsScroll = new javax.swing.JScrollPane();
        contacts = new mvc.view.generalUI.contacts.ContactList();
        content = new javax.swing.JPanel();
        messages = new mvc.view.generalUI.message.MessagePanel();
        profileScroll = new javax.swing.JScrollPane();
        profile = new mvc.view.generalUI.ProfilePanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stream2Me");
        setResizable(false);

        leftArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftArrowActionPerformed(evt);
            }
        });

        rightArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightArrowActionPerformed(evt);
            }
        });

        controls.setBackground(new java.awt.Color(255, 255, 255));
        controls.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        controls.setMaximumSize(new java.awt.Dimension(62, 500));
        controls.setMinimumSize(new java.awt.Dimension(62, 500));
        controls.setName(""); // NOI18N
        controls.setPreferredSize(new java.awt.Dimension(62, 500));
        controls.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        streamVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/streaming_Icons/unclicked-camera.png"))); // NOI18N
        streamVideo.setToolTipText("");
        streamVideo.setActionCommand("streamVideo");
        streamVideo.setClicked(new javax.swing.ImageIcon(getClass().getResource("/streaming_Icons/clicked-camera.png"))); // NOI18N
        streamVideo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        streamVideo.setMaximumSize(new java.awt.Dimension(58, 58));
        streamVideo.setMinimumSize(new java.awt.Dimension(58, 58));
        streamVideo.setName(""); // NOI18N
        streamVideo.setPreferredSize(new java.awt.Dimension(58, 58));
        streamVideo.setUnclicked(new javax.swing.ImageIcon(getClass().getResource("/streaming_Icons/unclicked-camera.png"))); // NOI18N
        controls.add(streamVideo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 3, -1, -1));

        streamAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/streaming_Icons/unclicked-microphone.png"))); // NOI18N
        streamAudio.setActionCommand("streamAudio");
        streamAudio.setClicked(new javax.swing.ImageIcon(getClass().getResource("/streaming_Icons/clicked-microphone.png"))); // NOI18N
        streamAudio.setMargin(new java.awt.Insets(2, 2, 2, 2));
        streamAudio.setMaximumSize(new java.awt.Dimension(58, 58));
        streamAudio.setMinimumSize(new java.awt.Dimension(58, 58));
        streamAudio.setName(""); // NOI18N
        streamAudio.setPreferredSize(new java.awt.Dimension(58, 58));
        streamAudio.setUnclicked(new javax.swing.ImageIcon(getClass().getResource("/streaming_Icons/unclicked-microphone.png"))); // NOI18N
        controls.add(streamAudio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 67, -1, -1));

        logout.setActionCommand("logout");
        logout.setMargin(new java.awt.Insets(2, 2, 2, 2));
        logout.setMaximumSize(new java.awt.Dimension(58, 58));
        logout.setMinimumSize(new java.awt.Dimension(58, 58));
        logout.setPreferredSize(new java.awt.Dimension(58, 58));
        controls.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 441, -1, 56));

        settings.setActionCommand("settings");
        settings.setMargin(new java.awt.Insets(2, 2, 2, 2));
        settings.setMaximumSize(new java.awt.Dimension(58, 58));
        settings.setMinimumSize(new java.awt.Dimension(58, 58));
        settings.setPreferredSize(new java.awt.Dimension(58, 58));
        settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });
        controls.add(settings, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 377, -1, -1));

        acceptAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/receiving_Icons/accept_audio.png"))); // NOI18N
        acceptAudio.setActionCommand("respondAudio");
        acceptAudio.setClicked(new javax.swing.ImageIcon(getClass().getResource("/receiving_Icons/reject_audio.png"))); // NOI18N
        acceptAudio.setMargin(new java.awt.Insets(2, 2, 2, 2));
        acceptAudio.setMaximumSize(new java.awt.Dimension(58, 58));
        acceptAudio.setMinimumSize(new java.awt.Dimension(58, 58));
        acceptAudio.setPreferredSize(new java.awt.Dimension(58, 58));
        acceptAudio.setUnclicked(new javax.swing.ImageIcon(getClass().getResource("/receiving_Icons/accept_audio.png"))); // NOI18N
        controls.add(acceptAudio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 254, -1, -1));

        acceptVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/receiving_Icons/accept_video.png"))); // NOI18N
        acceptVideo.setActionCommand("respondVideo");
        acceptVideo.setClicked(new javax.swing.ImageIcon(getClass().getResource("/receiving_Icons/reject_video.png"))); // NOI18N
        acceptVideo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        acceptVideo.setMaximumSize(new java.awt.Dimension(58, 58));
        acceptVideo.setMinimumSize(new java.awt.Dimension(58, 58));
        acceptVideo.setPreferredSize(new java.awt.Dimension(58, 58));
        acceptVideo.setUnclicked(new javax.swing.ImageIcon(getClass().getResource("/receiving_Icons/accept_video.png"))); // NOI18N
        controls.add(acceptVideo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 190, -1, -1));

        contactsScroll.setBackground(new java.awt.Color(255, 255, 255));
        contactsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        contactsScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        contacts.setBackground(new java.awt.Color(255, 255, 255));
        contactsScroll.setViewportView(contacts);

        javax.swing.GroupLayout peopleLayout = new javax.swing.GroupLayout(people);
        people.setLayout(peopleLayout);
        peopleLayout.setHorizontalGroup(
            peopleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(user, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contactsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
        );
        peopleLayout.setVerticalGroup(
            peopleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peopleLayout.createSequentialGroup()
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contactsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );

        content.setBackground(new java.awt.Color(255, 255, 255));
        content.setLayout(new java.awt.CardLayout());
        content.add(messages, "message");

        profileScroll.setBackground(new java.awt.Color(255, 255, 255));
        profileScroll.setBorder(null);
        profileScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        profileScroll.setViewportView(profile);

        content.add(profileScroll, "profile");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(leftArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(people, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rightArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(leftArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(rightArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(people, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leftArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftArrowActionPerformed
        Point p =getLocation();
        Dimension currentSize =getSize();
        if (leftArrow.getDependant().isVisible()) {
            leftArrow.getDependant().setVisible(false);
            currentSize.width -=leftArrow.getDependant().getPreferredSize().width+5;
            p.x +=leftArrow.getDependant().getPreferredSize().width;
        } else {
            leftArrow.getDependant().setVisible(true);
            leftArrow.getDependant().validate();
            currentSize.width +=leftArrow.getDependant().getPreferredSize().width+5;
            p.x -=leftArrow.getDependant().getPreferredSize().width;
            if (p.x < 0) {
                p.x =0;
            }
        }

        setLocation(p);
        setPreferredSize(currentSize);
        setSize(currentSize);
    }//GEN-LAST:event_leftArrowActionPerformed

    private void rightArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightArrowActionPerformed
        Dimension currentSize =getSize();
        if (rightArrow.getDependant().isVisible()) {
            rightArrow.getDependant().setVisible(false);
            currentSize.width -=rightArrow.getDependant().getPreferredSize().width;
        } else {
            rightArrow.getDependant().setVisible(true);
            rightArrow.getDependant().validate();
            currentSize.width +=rightArrow.getDependant().getPreferredSize().width;
        }
        
        setSize(currentSize);
    }//GEN-LAST:event_rightArrowActionPerformed

    private void settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_settingsActionPerformed

    private void setupGUI() {
        leftArrow.setPosition(controls, true);
        rightArrow.setPosition(content, false);
        
        addWindowListener(new GUIControl());
        
        acceptVideo.setVisible(false);
        acceptAudio.setVisible(false);
        
        streamVideo.addActionListener(UserControl.INSTANCE);
        streamAudio.addActionListener(UserControl.INSTANCE);
        
        acceptVideo.addActionListener(ContactListControl.INSTANCE);
        acceptAudio.addActionListener(ContactListControl.INSTANCE);
    }

    public ContactList getContactList() {
        return contacts;
    }

    public UserPanel getUserPanel() {
        return user;
    }
    
    public MessagePanel getMessagePanel() {
        return messages;
    }
    
    public ProfilePanel getProfilePanel() {
        return profile;
    }
    
    public JComponent changeContent(int type, String userID, String name) {
        CardLayout cl = (CardLayout)(content.getLayout());
        contacts.checkSelected(userID);
        switch (type) {
            case 0: //show contact profile
                profile.setUserID(userID, name, false);
                messages.setUserID("", "", false);
                cl.show(content, "profile");
                return profile;
            case 1: //show contact messages
                messages.setUserID(userID, name, false);
                profile.setUserID("", "", false);
                cl.show(content, "message");
                return messages;
            case 2: //show user profile
                profile.setUserID(userID, name, true);
                messages.setUserID("", "", false);
                cl.show(content, "profile");
                return profile;
            case 3: //show group messages
                messages.setUserID("default", name, true);
                profile.setUserID("", "", false);
                cl.show(content, "message");
                return messages;
            default: //show group messages
                messages.setUserID("default", name, true);
                profile.setUserID("", "", false);
                cl.show(content, "message");
                return messages;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private mvc.view.generalUI.containers.Button acceptAudio;
    private mvc.view.generalUI.containers.Button acceptVideo;
    private mvc.view.generalUI.contacts.ContactList contacts;
    private javax.swing.JScrollPane contactsScroll;
    private javax.swing.JPanel content;
    private javax.swing.JPanel controls;
    private mvc.view.generalUI.containers.HideArrow leftArrow;
    private mvc.view.generalUI.containers.Button logout;
    private mvc.view.generalUI.message.MessagePanel messages;
    private javax.swing.JPanel people;
    private mvc.view.generalUI.ProfilePanel profile;
    private javax.swing.JScrollPane profileScroll;
    private mvc.view.generalUI.containers.HideArrow rightArrow;
    private mvc.view.generalUI.containers.Button settings;
    private mvc.view.generalUI.containers.Button streamAudio;
    private mvc.view.generalUI.containers.Button streamVideo;
    private mvc.view.generalUI.UserPanel user;
    // End of variables declaration//GEN-END:variables

    public void setStreamAcceptors(boolean video, boolean acceptVideo, boolean audio, boolean acceptAudio, String userID) {
        this.acceptVideo.setOwnerID(userID);
        this.acceptAudio.setOwnerID(userID);
        
        this.acceptVideo.setPressed(acceptVideo);
        this.acceptAudio.setPressed(acceptAudio);
        
        this.acceptVideo.setVisible(video);
        this.acceptAudio.setVisible(audio);
    }

    public void hideStreamAcceptors(String userID) {
        acceptVideo.setOwnerID(userID);
        acceptAudio.setOwnerID(userID);
        
        acceptVideo.setVisible(false);
        acceptAudio.setVisible(false);
    }

    public void toggleStreamVideo(boolean onOrOff) {
        streamVideo.togglePressed(onOrOff);
    }

    public void toggleStreamAudio(boolean onOrOff) {
        streamAudio.togglePressed(onOrOff);
    }

    public void updateStreamAcceptors(boolean video, boolean acceptVideo, boolean audio, boolean acceptAudio, String userID) {
        if (userID.equals(this.acceptVideo.getOwnerID()) && userID.equals(this.acceptAudio.getOwnerID())) {
            this.acceptVideo.setPressed(acceptVideo);
            this.acceptAudio.setPressed(acceptAudio);

            this.acceptVideo.setVisible(video);
            this.acceptAudio.setVisible(audio);
        }
    }

    public void setEnableStreamVideo(boolean enable) {
        streamVideo.setEnabled(enable);
    }
}
