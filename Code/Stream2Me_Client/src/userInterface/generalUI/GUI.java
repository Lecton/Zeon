package userInterface.generalUI;

import userInterface.generalUI.videoMessages.VideoManager;
import client.AudioPlayer;
import client.Client;
import client.Colleague;
import connection.Connection;
import connection.messageLogCore.ConnectionObserver;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.WindowEvent;
import javax.swing.GroupLayout;
import javax.swing.JComponent;
import mediaStreaming.audio.AudioLine;
import mediaStreaming.audio.AudioStream;
import mediaStreaming.video.ScreenCapture;
import mediaStreaming.video.VideoStream;
import messageUtils.MessageUtils;
import messages.Message;
import messages.media.AudioStreamMessage;
import messages.media.VideoStreamMessage;
import messages.userConnection.LogoutMessage;
import userInterface.generalUI.contacts.ContactList;
import userInterface.generalUI.contacts.ContactProfile;
import userInterface.generalUI.messages.MessagePanel;
import utils.Log;
import utils.MessageFactory;

public class GUI extends javax.swing.JFrame {
    private Connection con;
    private final Client parent;
    private final Dimension currentSize;
    private final int leftSize;
    private int rightSize;
    
    private VideoStream vStream;
    private AudioStream aStream;
    
    private AudioPlayer audioPlayer;
    private VideoManager videoPlayer;
    
    public GUI(Connection con, Colleague me, Client parent) {
        this.parent =parent;
        
        setupBackend(con);
        setupGUI(me);
        
        this.currentSize =getPreferredSize();
        this.leftSize =btnLeftArrow.getDependant().getWidth()+5;
        this.rightSize =btnRightArrow.getDependant().getWidth()+5;
        
        btnVideoAccept.setVisible(false);
        btnAudioAccept.setVisible(false);
        
        vStream =new VideoStream(new ScreenCapture(), con);
        aStream =new AudioStream(new AudioLine(), con);
        
        vStream.setStream(new VideoStreamMessage(me.getUserID(), 
                Message.SERVER, MessageUtils.generateStreamID(
                        me.getEmail(), MessageUtils.StreamType.VIDEO)));
        aStream.setStream(new AudioStreamMessage(me.getUserID(), 
                Message.SERVER, MessageUtils.generateStreamID(
                        me.getEmail(), MessageUtils.StreamType.AUDIO)));
    }
    
    public Connection getConnection() {
        return con;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLeftArrow = new userInterface.generalUI.HideArrow();
        pnlControls = new javax.swing.JPanel();
        btnSettings = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnVideoStream = new userInterface.generalUI.Button();
        btnAudioStream = new userInterface.generalUI.Button();
        btnVideoAccept = new userInterface.generalUI.Button();
        btnAudioAccept = new userInterface.generalUI.Button();
        pnlPeople = new javax.swing.JPanel();
        pnlUser = new userInterface.generalUI.UserPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clsContactList = new userInterface.generalUI.contacts.ContactList();
        btnRightArrow = new userInterface.generalUI.HideArrow();
        pnlContent = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(991, 736));
        setMinimumSize(new java.awt.Dimension(419, 736));
        setName("mainFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnLeftArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftArrowActionPerformed(evt);
            }
        });

        pnlControls.setBackground(new java.awt.Color(255, 255, 255));
        pnlControls.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSettings.setText("Settings");
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnVideoStream.setText("Video");
        btnVideoStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVideoStreamActionPerformed(evt);
            }
        });

        btnAudioStream.setText("Audio");
        btnAudioStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAudioStreamActionPerformed(evt);
            }
        });

        btnVideoAccept.setText("Ac Vid");
        btnVideoAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVideoAcceptActionPerformed(evt);
            }
        });

        btnAudioAccept.setText("Ac Aud");
        btnAudioAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAudioAcceptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlsLayout = new javax.swing.GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSettings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVideoStream, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAudioStream, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnVideoAccept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAudioAccept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlControlsLayout.setVerticalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVideoStream, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAudioStream, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134)
                .addComponent(btnVideoAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAudioAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlPeople.setBackground(new java.awt.Color(255, 255, 255));
        pnlPeople.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlPeople.setMaximumSize(new java.awt.Dimension(345, 777));
        pnlPeople.setMinimumSize(new java.awt.Dimension(345, 777));
        pnlPeople.setPreferredSize(new java.awt.Dimension(345, 777));

        pnlUser.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        clsContactList.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(clsContactList);

        javax.swing.GroupLayout pnlPeopleLayout = new javax.swing.GroupLayout(pnlPeople);
        pnlPeople.setLayout(pnlPeopleLayout);
        pnlPeopleLayout.setHorizontalGroup(
            pnlPeopleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlUser, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        pnlPeopleLayout.setVerticalGroup(
            pnlPeopleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPeopleLayout.createSequentialGroup()
                .addComponent(pnlUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        btnRightArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightArrowActionPerformed(evt);
            }
        });

        pnlContent.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlContentLayout = new javax.swing.GroupLayout(pnlContent);
        pnlContent.setLayout(pnlContentLayout);
        pnlContentLayout.setHorizontalGroup(
            pnlContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );
        pnlContentLayout.setVerticalGroup(
            pnlContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 777, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnLeftArrow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRightArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(btnLeftArrow, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE)
            .addComponent(pnlControls, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnRightArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlPeople, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlContent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        LogoutMessage lm =MessageFactory.generateLogout(pnlUser.getUserID());
        con.writeSafe(lm);
        con.setHandlerLoggedOut();
        
        ConnectionObserver.close();
    }//GEN-LAST:event_formWindowClosing

    private void btnLeftArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftArrowActionPerformed
        Point p =getLocation();

        if (btnLeftArrow.getDependant().isVisible()) {
            btnLeftArrow.getDependant().setVisible(false);
            currentSize.width -=leftSize;
            p.x +=leftSize;
        } else {
            btnLeftArrow.getDependant().setVisible(true);
            currentSize.width +=leftSize;
            p.x -=leftSize;
            if (p.x < 0) {
                p.x =0;
            }
        }

        setLocation(p);
        setPreferredSize(currentSize);
        setSize(currentSize);
    }//GEN-LAST:event_btnLeftArrowActionPerformed

    private void btnRightArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightArrowActionPerformed
        if (btnRightArrow.getDependant().isVisible()) {
            btnRightArrow.getDependant().setVisible(false);
            currentSize.width -=rightSize;
        } else {
            btnRightArrow.getDependant().setVisible(true);
            currentSize.width +=rightSize;
        }

        setPreferredSize(currentSize);
        setSize(currentSize);
    }//GEN-LAST:event_btnRightArrowActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed

    }//GEN-LAST:event_btnSettingsActionPerformed

    private void btnVideoStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVideoStreamActionPerformed
        con.writeSafe(
                MessageFactory.generateStreamProperty(getUserID(), 
                        Message.SERVER, vStream.getStreamID(), 
                        !btnVideoStream.isPressed()));
        
        if (!btnVideoStream.isPressed()) {
            int selectedUID =clsContactList.getSelectedUserID();
            if (selectedUID >= 0) {
                con.writeSafe(
                        MessageFactory.generateStreamUpdate(getUserID(), 
                                Message.SERVER, vStream.getStreamID(),
                                selectedUID, 1));
                
                clsContactList.setSelectedStreamingVideo();
            }
            
            vStream.start();
        } else {
            vStream.stop();
            vStream.setStream(new VideoStreamMessage(getUserID(), 
                    Message.SERVER, MessageUtils.generateStreamID(
                        pnlUser.getUser().getEmail(), MessageUtils.StreamType.VIDEO)));
        }
        btnVideoStream.togglePressed();
    }//GEN-LAST:event_btnVideoStreamActionPerformed

    private void btnVideoAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVideoAcceptActionPerformed
        ContactProfile cp =clsContactList.getSelectedProfile();
        if (cp != null) {
            if (cp.hasVideoStream()) {
                if (!btnVideoAccept.isPressed()) {
                    con.writeSafe(MessageFactory.generateStreamResponse(
                                    getUserID(), cp.getVideoStreamID(), true));
                    cp.notifyVideo(true);
                } else {
                    con.writeSafe(MessageFactory.generateStreamResponse(
                                    getUserID(), cp.getVideoStreamID(), false));
                    cp.notifyVideo(false);
                }
                btnVideoAccept.togglePressed();
            } else {
                Log.error(this.getClass(), "Cannot accept video on a non streaming profile.");
            }
        } else {
            Log.error(this.getClass(), "Cannot accept video on a non selected profile.");
        }
    }//GEN-LAST:event_btnVideoAcceptActionPerformed

    private void btnAudioAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAudioAcceptActionPerformed
        ContactProfile cp =clsContactList.getSelectedProfile();
        if (cp != null) {
            if (cp.hasAudioStream()) {
                if (!btnAudioAccept.isPressed()) {
                    con.writeSafe(MessageFactory.generateStreamResponse(
                                    getUserID(), cp.getAudioStreamID(), true));
                    cp.notifyAudio(true);
                } else {
                    con.writeSafe(MessageFactory.generateStreamResponse(
                                    getUserID(), cp.getAudioStreamID(), false));
                    cp.notifyAudio(false);
                }
                btnAudioAccept.togglePressed();
            } else {
                Log.error(this.getClass(), "Cannot accept audio on a non streaming profile.");
            }
        } else {
            Log.error(this.getClass(), "Cannot accept audio on a non selected profile.");
        }
    }//GEN-LAST:event_btnAudioAcceptActionPerformed

    private void btnAudioStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAudioStreamActionPerformed
        con.writeSafe(
                MessageFactory.generateStreamProperty(getUserID(), 
                        Message.SERVER, aStream.getStreamID(), 
                        !btnAudioStream.isPressed()));
        
        if (!btnAudioStream.isPressed()) {
            int selectedUID =clsContactList.getSelectedUserID();
            if (selectedUID >= 0) {
                con.writeSafe(
                        MessageFactory.generateStreamUpdate(getUserID(), 
                                Message.SERVER, aStream.getStreamID(),
                                selectedUID, 1));
                
                clsContactList.setSelectedStreamingAudio();
            }
            
            aStream.start();
        } else {
            aStream.stop();
            aStream.setStream(new AudioStreamMessage(getUserID(), 
                    Message.SERVER, MessageUtils.generateStreamID(
                        pnlUser.getUser().getEmail(), MessageUtils.StreamType.AUDIO)));
        }
        btnAudioStream.togglePressed();
    }//GEN-LAST:event_btnAudioStreamActionPerformed

    private int lastSize =504;
    private JComponent contentModule;
    private void changeContent(JComponent comp, int horizontalSize) {
        contentModule =comp;
        int GUIShrinkWidth =0;
        if (horizontalSize != lastSize) {
            GUIShrinkWidth =lastSize-horizontalSize;
            lastSize =horizontalSize;
        }
        
        pnlContent.removeAll();
        
        javax.swing.GroupLayout pnlContentLayout = new GroupLayout(pnlContent);
        pnlContent.setLayout(pnlContentLayout);
        pnlContentLayout.setHorizontalGroup(
            pnlContentLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(comp, GroupLayout.DEFAULT_SIZE, horizontalSize, Short.MAX_VALUE)
        );
        pnlContentLayout.setVerticalGroup(
            pnlContentLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(comp, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        
        if (btnRightArrow.getDependant().isVisible()) {
            currentSize.width -=GUIShrinkWidth;
            setPreferredSize(currentSize);
            setSize(currentSize);
        }
        this.rightSize =horizontalSize+5;
//        
//        if (!btnRightArrow.getDependant().isVisible()) {
//            this.rightSize +=20;
//            btnRightArrowActionPerformed(null);
//            this.rightSize -=20;
//        }
    }
    
    private void setupGUI(Colleague me) {
        initComponents();
        setTitle("Stream2Me");
        
        btnLeftArrow.setPosition(pnlControls, false);
        btnRightArrow.setPosition(pnlContent, true);
        pnlUser.setUser(me);
        pnlUser.setUserInterface(this);
        clsContactList.setUserInterface(this);
        
        profileSelectedMessage(me);
        
        con.writeSafe(utils.MessageFactory.generateRefreshListRequest(getUserID()));
    }
    
    private void setupBackend(Connection con) {
        this.con =con;        
        
        this.con.setHandlerUserInterface(this);
//        this.listener =streamListener.start(con, this);
        this.audioPlayer =AudioPlayer.start();
        this.videoPlayer =new VideoManager();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private userInterface.generalUI.Button btnAudioAccept;
    private userInterface.generalUI.Button btnAudioStream;
    private javax.swing.JButton btnExit;
    private userInterface.generalUI.HideArrow btnLeftArrow;
    private javax.swing.JButton btnLogout;
    private userInterface.generalUI.HideArrow btnRightArrow;
    private javax.swing.JButton btnSettings;
    private userInterface.generalUI.Button btnVideoAccept;
    private userInterface.generalUI.Button btnVideoStream;
    private userInterface.generalUI.contacts.ContactList clsContactList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlContent;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JPanel pnlPeople;
    private userInterface.generalUI.UserPanel pnlUser;
    // End of variables declaration//GEN-END:variables

    public void profileSelectedMessage(Colleague profile) {
        final MessagePanel mp =new MessagePanel();
        mp.setUserInterface(this);
        mp.setMessagesHistory(profile.getMessageHistory(), profile, (profile.getUserID() == getUserID() ? Message.ALL : profile.getUserID()), (getUserID() == profile.getUserID()));
        
        btnRightArrow.setToolTipText(profile.getName()+" message board");
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                changeContent(mp, 504);
                mp.resetScroll();
                
                clsContactList.notifyMessageView(mp.getOwnerID());
            }
        });
    }
    
    public void profileSelectedView(Colleague profile) {
        final ProfilePanel pp =new ProfilePanel();
        pp.setUserInterface(this);
        if (profile.getUserID() == getUserID()) {
            pp.setEditable(true);
        }
        pp.setProfile(profile);
        btnRightArrow.setToolTipText(profile.getName()+" profile board");
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                changeContent(pp, 320);
            }
        });
    }
    
    public void profileSelected(final ContactProfile profile) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                System.out.println("Hello");
                profileSelectedMessage(profile.getProfile());
                btnVideoAccept.setVisible(profile.hasVideoStream());
                btnAudioAccept.setVisible(profile.hasAudioStream());
            }
        });
    }
    
    public void profileUnselected(final int userID) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (contentModule != null) {
                    if (contentModule instanceof MessagePanel) {
                        if (((MessagePanel)contentModule).getOwnerID() == userID) {
                            ((MessagePanel)contentModule).update();
                        }
                    }
                }
                profileSelectedMessage(pnlUser.getUser());
                btnVideoAccept.setVisible(false);
                btnAudioAccept.setVisible(false);
            }
        });
    }

    public int getUserID() {
        return pnlUser.getUserID();
    }

    public void addProfile(Colleague generateColleague) {
        clsContactList.addProfile(generateColleague);
    }

    public void removeProfile(int userID) {
        clsContactList.removeProfile(userID);
    }

    public Colleague getContactProfile(int userID) {
        return clsContactList.getProfile(userID);
    }

    public boolean isAudioStream() {
        return btnAudioStream.isPressed();
    }

    public boolean isVideoStream() {
        return btnVideoStream.isPressed();
    }

    public String getAudioStreamID() {
        return aStream.getStreamID();
    }

    public String getVideoStreamID() {
        return vStream.getStreamID();
    }

    public ContactList getContactList() {
        return clsContactList;
    }

    public Colleague getUser() {
        return pnlUser.getUser();
    }

    public void updateChatArea(final int targetID, final int userID) {
        (new Thread(new Runnable() {
            @Override
            public void run() {
                if (contentModule != null) {
                    if (contentModule instanceof MessagePanel) {
                        int targetUser =userID;
                        if (targetID == Message.ALL) {
                            targetUser =getUserID();
                        }
                        if (((MessagePanel)contentModule).getOwnerID() == targetUser) {
                            ((MessagePanel)contentModule).update();
                        }
                    }
                }
            }
        })).start();
    }
    
    public void writetoAudioBuffer(final byte[] buffer) {
        (new Thread(new Runnable() {

            @Override
            public void run() {
                audioPlayer.write(buffer);
            }
        })).start();
    }
    
    public void writetoVideoBuffer(final String streamID, final String buffer) {
        (new Thread(new Runnable() {

            @Override
            public void run() {
//                Log.error(this.getClass(), "Video buffer not implemented yet.");
//                videoPlayer.addVideoFrame(streamID);
                videoPlayer.write(streamID, buffer);
            }
        })).start();
    }
}
