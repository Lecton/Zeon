/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userInterface.generalUI;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;

/**
 *
 * @author Bernhard
 */
public class HideArrow extends JButton {
    public static int MINWIDTH =33;
    
    boolean Right;
    JComponent dependant =null;
//    JPanel parent;
//    Dimension prefSize;
    
    /**
     * Creates new form HideArrow
     */
    public HideArrow() {
        initComponents();
        this.setBackground(Color.WHITE);
        this.setPreferredSize(new Dimension(MINWIDTH, 736));
    }
    
    public void setPosition(JComponent dependant, boolean Right) {
        this.Right =Right;
        this.dependant =dependant;
//        this.parent =parent;
//        this.prefSize =parent.getPreferredSize();
    }

    public JComponent getDependant() {
        return dependant;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(23, 32767));
        setMinimumSize(new java.awt.Dimension(23, 90));
        setName(""); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        
        int height =80;
        int gap =4;
        int width =23;
        
        int leftX =gap*3;
        int rightX =width-gap;
        int topY =gap*2+this.getHeight()/2-height;
        int bottomY =topY+height;
        int centreY =topY+(bottomY-topY)/2;
        
        if (dependant != null) {
            if (Right) {
                if (dependant.isVisible()) {
                    int temp =leftX;
                    leftX =rightX;
                    rightX =temp;
                } else {

                }
            } else {
                if (dependant.isVisible()) {

                } else {
                    int temp =leftX;
                    leftX =rightX;
                    rightX =temp;
                }
            }
        }
        
        int[] xPoints =new int[3];
        xPoints[0] =leftX;
        xPoints[1] =rightX;
        xPoints[2] =leftX;
        
        int[] yPoints =new int[3];
        yPoints[0] =topY;
        yPoints[1] =centreY;
        yPoints[2] =bottomY;
        g.setColor(Color.BLUE);
        g.fillPolygon(xPoints, yPoints, 3);
        
        g.drawLine(leftX, topY, leftX, bottomY);
        g.drawLine(leftX, topY, rightX, centreY);
        g.drawLine(rightX, centreY, leftX, bottomY);
    }
}