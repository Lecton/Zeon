/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userInterface.generalUI.messages;

import client.Colleague;
import java.util.ArrayList;
import messages.Message;
import messages.StringMessage;
import userInterface.generalUI.GUI;
import utils.Log;
import utils.MessageFactory;

/**
 *
 * @author Bernhard
 */
public class MessagePanel extends javax.swing.JPanel {
    private Colleague owner;
    private int targetID;
    private GUI userInterface;
    
    /**
     * Creates new form MessagePanel
     */
    public MessagePanel() {
        initComponents();
    }

    public void setUserInterface(GUI userInterface) {
        this.userInterface = userInterface;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mltMessages = new userInterface.generalUI.messages.MessageList();
        txtMessage = new javax.swing.JTextField();
        btnSend = new java.awt.Button();
        btnOwner = new javax.swing.JButton();

        btnSend.setLabel("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnOwner.setText("Someone");
        btnOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOwnerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mltMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(btnOwner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnOwner)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mltMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMessage)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
//        mltMessages.addMessage(new StringMessage(0, 0, "hello", txtMessage.getText()));
        if(!txtMessage.getText().isEmpty() && userInterface != null){
            StringMessage sm = MessageFactory.generateStringMessage(
                    userInterface.getUserID(), targetID, 
                    userInterface.getUser().getEmail(), 
                    txtMessage.getText() + "\n");
            if (sm.getTargetID() != Message.IGNORE) {
                userInterface.getConnection().writeSafe(sm);
                
                owner.addMessage(sm);
                mltMessages.update();
            } else {
                Log.error(this.getClass(), "Message ignored.");
            }
        } else {
            Log.error(this.getClass(), "Empty text or user interface not set.");
        }
        txtMessage.setText("");
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOwnerActionPerformed
        userInterface.profileSelectedView(owner);
    }//GEN-LAST:event_btnOwnerActionPerformed

    public void setMessagesHistory(ArrayList<StringMessage> chatHistory, Colleague owner, int targetID, boolean multiPerson) {
        btnOwner.setText(owner.getName()+"'s Message Board");
        this.owner =owner;
        this.targetID =targetID;
        mltMessages.setMessagesHistory(chatHistory, targetID, multiPerson);
    }
    
    public void update() {
        mltMessages.update();
    }
    
    public int getOwnerID() {
        return owner.getUserID();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOwner;
    private java.awt.Button btnSend;
    private userInterface.generalUI.messages.MessageList mltMessages;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

    public void resetScroll() {
        mltMessages.getVerticalScrollBar().setValue(0);
    }
}
