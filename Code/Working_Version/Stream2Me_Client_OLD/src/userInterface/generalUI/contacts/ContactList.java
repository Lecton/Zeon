/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userInterface.generalUI.contacts;

import client.Colleague;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JPanel;
import userInterface.generalUI.GUI;
import userInterface.generalUI.SeparatorBorder;
import utils.Log;

/**
 *
 * @author Bernhard
 */
public class ContactList extends javax.swing.JPanel {
    private GUI userInterface =null;
    private GridBagConstraints gbcContactProfile;
    private ContactProfile selectedProfile ;
    private ArrayList<ContactProfile> list;
    
    /**
     * Creates new form NewJPanel
     */
    public ContactList() {
        initComponents();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.weightx = 1;
        gbc.weighty = 1;
        JPanel p =new JPanel();
        p.setBackground(Color.WHITE);
        p.setPreferredSize(new Dimension(0, 0));
        add(p, gbc);
        
        gbcContactProfile = new GridBagConstraints();
        gbcContactProfile.gridwidth = GridBagConstraints.REMAINDER;
        gbcContactProfile.weightx = 1;
        gbcContactProfile.fill = GridBagConstraints.HORIZONTAL;
        
        selectedProfile =null;
        list =new ArrayList<ContactProfile>();
    }

    public void setUserInterface(GUI userInterface) {
        this.userInterface = userInterface;
    }

    public GUI getUserInterface() {
        return userInterface;
    }
    
    public void addProfile(Colleague profile) {
        ContactProfile contact =new ContactProfile();
        contact.setBorder(new SeparatorBorder(Color.BLACK, false, true, false, true));
        contact.setProfile(profile);
        contact.setParent(this);
        list.add(contact);
        add(contact, gbcContactProfile, list.size()-1);
        update();
        
        Log.write(this.getClass(), "User added");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 20));
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void update() {
        revalidate();
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void unselect(ContactProfile profile) {
        if (profile != null) {
            profile.unselect();
            userInterface.profileUnselected(profile.getUserID());
        }
        selectedProfile =null;
    }
    
    private void select(ContactProfile profile) {
        if (profile != null) {
            profile.select();
            userInterface.profileSelected(profile);
        }
        selectedProfile =profile;
    }
    
    public void showMessages(ContactProfile profile) {
        System.out.println("Hello");
        userInterface.profileSelectedMessage(profile.getProfile());
    }
    
    public void showProfile(ContactProfile profile) {
        System.out.println("Hi");
        userInterface.profileSelectedView(profile.getProfile());
    }
    
    void mouseClicked(MouseEvent evt, ContactProfile profile) {
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (selectedProfile != profile) {
                unselect(selectedProfile);
                select(profile);
                Log.write(this.getClass(), "Selecting");
            } else {
                unselect(selectedProfile);
                unselect(profile);
                Log.write(this.getClass(), "Unselecting");
            }
        } else if (evt.getButton() == MouseEvent.BUTTON2) {
            
        }
    }

    public void removeProfile(int userID) {
        ContactProfile profile =getContactProfile(userID);
        if (profile != null) {
            list.remove(profile);
            remove(profile);
            update();
            
            if (profile == selectedProfile) {
//                userInterface.getChatArea().clear();
            }
        } else {
            Log.error(this.getClass(), "User to be removed was not found in list");
        }
    }
    
    public ContactProfile getContactProfile(int userID) {
        for (ContactProfile cp: list) {
            if (cp.getUserID() == userID) {
                return cp;
            }
        }
        return null;
    }

    public Colleague getProfile(int userID) {
        ContactProfile cp =getContactProfile(userID);
        if (cp != null) {
            return cp.getProfile();
        }
        return null;
    }

    public int getSelectedUserID() {
        if (selectedProfile == null) {
            return -1;
        } else {
            return selectedProfile.getUserID();
        }
    }
    
    public Colleague getSelectedColleague() {
        if (selectedProfile == null) {
            return null;
        } else {
            return selectedProfile.getProfile();
        }
    }
    
    public ContactProfile getSelectedProfile() {
        if (selectedProfile == null) {
            return null;
        } else {
            return selectedProfile;
        }
    }
    
    public void setSelectedStreamingVideo() {
        if (selectedProfile != null) {
            selectedProfile.setStreamVideo(true);
        }
    }
    
    public void setSelectedStreamingAudio() {
        if (selectedProfile != null) {
            selectedProfile.setStreamAudio(true);
        }
    }
    
    public void notifyMessageView(int userID) {
        ContactProfile cp =getContactProfile(userID);
        if (cp != null) {
            cp.notifyMessageView();
        }
    }
    
    public void notifyVideoAccept(int userID) {
        ContactProfile cp =getContactProfile(userID);
        if (cp != null) {
            cp.notifyVideo(true);
        }
    }
    
    public void notifyAudioAccept(int userID) {
        ContactProfile cp =getContactProfile(userID);
        if (cp != null) {
            cp.notifyAudio(true);
        }
    }
}
